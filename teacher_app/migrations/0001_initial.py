# Generated by Django 5.0.6 on 2024-06-28 08:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.CharField(
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        verbose_name="课程号",
                    ),
                ),
                ("name", models.CharField(max_length=256, verbose_name="课程名")),
                ("total_hours", models.PositiveIntegerField(verbose_name="总学时")),
                (
                    "kind",
                    models.IntegerField(
                        choices=[(1, "本科生课程"), (2, "研究生课程")],
                        verbose_name="课程性质",
                    ),
                ),
            ],
            options={
                "verbose_name": "课程",
            },
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "id",
                    models.PositiveIntegerField(
                        primary_key=True, serialize=False, verbose_name="序号"
                    ),
                ),
                ("title", models.CharField(max_length=256, verbose_name="论文名称")),
                ("source", models.CharField(max_length=256, verbose_name="发表源")),
                ("pub_year", models.PositiveIntegerField(verbose_name="发表年份")),
                (
                    "kind",
                    models.IntegerField(
                        choices=[
                            (1, "full paper"),
                            (2, "short paper"),
                            (3, "poster paper"),
                            (4, "demo paper"),
                        ],
                        verbose_name="类型",
                    ),
                ),
                (
                    "level",
                    models.IntegerField(
                        choices=[
                            (1, "CCF-A"),
                            (2, "CCF-B"),
                            (3, "CCF-C"),
                            (4, "中文 CCF-A"),
                            (5, "中文 CCF-B"),
                            (6, "无级别"),
                        ],
                        verbose_name="级别",
                    ),
                ),
            ],
            options={
                "verbose_name": "论文",
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.CharField(
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        verbose_name="项目号",
                    ),
                ),
                ("name", models.CharField(max_length=256, verbose_name="项目名称")),
                ("source", models.CharField(max_length=256, verbose_name="项目来源")),
                (
                    "kind",
                    models.IntegerField(
                        choices=[
                            (1, "国家级项目"),
                            (2, "省部级项目"),
                            (3, "市厅级项目"),
                            (4, "企业合作项目"),
                            (5, "其它类型项目"),
                        ],
                        verbose_name="项目类型",
                    ),
                ),
                ("total_fund", models.FloatField(verbose_name="总经费")),
                ("start_year", models.PositiveIntegerField(verbose_name="开始年份")),
                ("end_year", models.PositiveIntegerField(verbose_name="结束年份")),
            ],
            options={
                "verbose_name": "项目",
            },
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                (
                    "id",
                    models.CharField(
                        max_length=5,
                        primary_key=True,
                        serialize=False,
                        verbose_name="工号",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="姓名")),
                (
                    "gender",
                    models.IntegerField(
                        choices=[(1, "男"), (2, "女")], verbose_name="性别"
                    ),
                ),
                (
                    "title",
                    models.IntegerField(
                        choices=[
                            (1, "博士后"),
                            (2, "助教"),
                            (3, "讲师"),
                            (4, "副教授"),
                            (5, "特任教授"),
                            (6, "教授"),
                            (7, "助理研究员"),
                            (8, "特任副研究员"),
                            (9, "副研究员"),
                            (10, "特任研究员"),
                            (11, "研究员"),
                        ],
                        verbose_name="职称",
                    ),
                ),
            ],
            options={
                "verbose_name": "教师",
            },
        ),
        migrations.CreateModel(
            name="TeacherCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.PositiveIntegerField(verbose_name="年份")),
                (
                    "semester",
                    models.IntegerField(
                        choices=[(1, "春季学期"), (2, "夏季学期"), (3, "秋季学期")],
                        verbose_name="学期",
                    ),
                ),
                ("hours", models.PositiveIntegerField(verbose_name="学时")),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teacher_app.course",
                        verbose_name="课程",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="teacher_app.teacher",
                        verbose_name="教师",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="course",
            name="teachers",
            field=models.ManyToManyField(
                through="teacher_app.TeacherCourse", to="teacher_app.teacher"
            ),
        ),
        migrations.CreateModel(
            name="TeacherPaper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rank", models.PositiveIntegerField(verbose_name="排名")),
                ("corresp", models.BooleanField(verbose_name="是否通讯作者")),
                (
                    "paper",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teacher_app.paper",
                        verbose_name="论文",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="teacher_app.teacher",
                        verbose_name="教师",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="paper",
            name="teachers",
            field=models.ManyToManyField(
                through="teacher_app.TeacherPaper", to="teacher_app.teacher"
            ),
        ),
        migrations.CreateModel(
            name="TeacherProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rank", models.PositiveIntegerField(verbose_name="排名")),
                ("fund", models.FloatField(verbose_name="承担经费")),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teacher_app.project",
                        verbose_name="项目",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="teacher_app.teacher",
                        verbose_name="教师",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="project",
            name="teachers",
            field=models.ManyToManyField(
                through="teacher_app.TeacherProject", to="teacher_app.teacher"
            ),
        ),
        migrations.AddConstraint(
            model_name="teachercourse",
            constraint=models.UniqueConstraint(
                fields=("teacher", "course", "year", "semester"),
                name="unique_teacher_course_year_semester",
                violation_error_message="授课教师重复",
            ),
        ),
        migrations.AddConstraint(
            model_name="teacherpaper",
            constraint=models.UniqueConstraint(
                fields=("teacher", "paper"),
                name="unique_teacher_paper",
                violation_error_message="作者重复",
            ),
        ),
        migrations.AddConstraint(
            model_name="teacherpaper",
            constraint=models.UniqueConstraint(
                fields=("paper", "rank"),
                name="unique_paper_rank",
                violation_error_message="排名重复",
            ),
        ),
        migrations.AddConstraint(
            model_name="teacherpaper",
            constraint=models.UniqueConstraint(
                condition=models.Q(("corresp", True)),
                fields=("paper",),
                name="unique_paper_corresp",
                violation_error_message="一篇论文只能有一个通讯作者",
            ),
        ),
        migrations.AddConstraint(
            model_name="teacherproject",
            constraint=models.UniqueConstraint(
                fields=("teacher", "project"),
                name="unique_teacher_project",
                violation_error_message="承担教师重复",
            ),
        ),
        migrations.AddConstraint(
            model_name="teacherproject",
            constraint=models.UniqueConstraint(
                fields=("project", "rank"),
                name="unique_project_rank",
                violation_error_message="排名重复",
            ),
        ),
        migrations.AddConstraint(
            model_name="project",
            constraint=models.CheckConstraint(
                check=models.Q(("start_year__lte", models.F("end_year"))),
                name="start_year_lte_end_year",
                violation_error_message="开始年份应小于或等于结束年份",
            ),
        ),
    ]
